I"õW<h3 id="pitfalls-in-production">Pitfalls in Production</h3>

<p>Being able to monitor
<a href="http://en.wikipedia.org/wiki/Development_environment_(software_development_process)">production</a>
services for potential errors is critical. Especially if the services
are dependant on external resources which may become unavailable or
exhibit unexpected behavior. Even if you follow good software
development discipline, this is always a source of concern. Think
network outages, unannounced third party API changes, hosted services
becoming unavailable, etc.</p>

<p>For large software projects, creating a <a href="http://en.wikipedia.org/wiki/Software_testing">testing
strategy</a> that involves
unit and integration is helpful when managing complexity of the commit
to deployment workflow. Functional/smoke tests are also good to ensure
critical functionality works as expected. Although, in an environment
where the running of your software is dependent on external resources,
you need a system of continuous monitoring that run these smoke tests.</p>

<h3 id="monitoring-confusion">Monitoring Confusion</h3>

<p>At <a href="https://www.xignite.com/">Xignite</a>, we use
<a href="https://code.google.com/p/mb-unit/">Gallio</a> for our testing framework
and <a href="http://www.cruisecontrolnet.org">CC.NET</a> for our continuous
integration. I used these tools for my production smoke tests but soon
realized that not all tests were equal. Getting paged at 2am for a test
failure that is not mission critical sucks. Even worse, these lower
priority failures can mask very high priority ones since they cause the
entire <a href="http://en.wikipedia.org/wiki/Test_fixture">test fixture</a> to
fail, and require scrutiny on behalf of the dev-ops person to ensure
that a high priority failure doesn't fall through the cracks.</p>

<p>Consider the following test fixture and how it lumps all the different
tests together.</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">namespace</span> <span class="nn">MyServices.Tests.Smoke</span>
<span class="p">{</span>
   <span class="k">using</span> <span class="nn">Gallio.Framework</span><span class="p">;</span>
   <span class="k">using</span> <span class="nn">Gallio.Model</span><span class="p">;</span>
   <span class="k">using</span> <span class="nn">MbUnit.Framework</span><span class="p">;</span>

   <span class="p">[</span><span class="n">TestFixture</span><span class="p">]</span>
   <span class="k">public</span> <span class="k">class</span> <span class="nc">OneOfMyServicesTests</span>
   <span class="p">{</span>
      <span class="p">[</span><span class="n">SetUp</span><span class="p">]</span>
      <span class="k">public</span> <span class="k">void</span> <span class="nf">Setup</span><span class="p">()</span>
      <span class="p">{</span>
         <span class="c1">// Setup an individual test to run.</span>
      <span class="p">}</span>

      <span class="p">[</span><span class="n">FixtureSetUp</span><span class="p">]</span>
      <span class="k">public</span> <span class="k">void</span> <span class="nf">TestFixtureSetUp</span><span class="p">()</span>
      <span class="p">{</span>
         <span class="c1">// Configure fixture for testing.</span>
      <span class="p">}</span>

      <span class="p">[</span><span class="n">FixtureTearDown</span><span class="p">]</span>
      <span class="k">public</span> <span class="k">void</span> <span class="nf">TestFixtureTearDown</span><span class="p">()</span>
      <span class="p">{</span>
         <span class="k">if</span> <span class="p">(</span><span class="n">TestContext</span><span class="p">.</span><span class="n">CurrentContext</span><span class="p">.</span><span class="n">Outcome</span> <span class="p">==</span> <span class="n">TestOutcome</span><span class="p">.</span><span class="n">Failed</span><span class="p">)</span>
         <span class="p">{</span>
            <span class="c1">// Send signal to monitoring system that test fixture has failed.</span>
         <span class="p">}</span>
         <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">TestContext</span><span class="p">.</span><span class="n">CurrentContext</span><span class="p">.</span><span class="n">Outcome</span> <span class="p">==</span> <span class="n">TestOutcome</span><span class="p">.</span><span class="n">Passed</span><span class="p">)</span>
         <span class="p">{</span>
            <span class="c1">// Send signal to monitoring system that test fixture has succeeded.</span>
         <span class="p">}</span>
         <span class="k">else</span>
         <span class="p">{</span>
            <span class="c1">// Handle some other outcome.</span>
         <span class="p">}</span>
      <span class="p">}</span>     

      <span class="p">[</span><span class="n">Test</span><span class="p">]</span>
      <span class="k">public</span> <span class="k">void</span> <span class="nf">MissionCritical</span><span class="p">()</span>
      <span class="p">{</span>
         <span class="c1">// ...</span>
      <span class="p">}</span>

      <span class="p">[</span><span class="n">Test</span><span class="p">]</span>
      <span class="k">public</span> <span class="k">void</span> <span class="nf">Important</span><span class="p">()</span>
      <span class="p">{</span>
         <span class="c1">// ...</span>
      <span class="p">}</span>

      <span class="p">[</span><span class="n">Test</span><span class="p">]</span>
      <span class="k">public</span> <span class="k">void</span> <span class="nf">MinorFunctionality</span><span class="p">()</span>
      <span class="p">{</span>
         <span class="c1">// ...</span>
      <span class="p">}</span>     
   <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Any test failure will make the entire context outcome to fail whether it
was the mission critical test or the test that affects minor
functionality. I tried looking through the Gallio/MbUnit API, event its
<a href="https://github.com/Gallio/mbunit-v3">source</a>, but couldn't find a way
to find out which tests failed within a fixture. If anyone knows how to
determine this, please let me know.</p>

<h3 id="prioritized-testing">Prioritized Testing</h3>

<p>What I do know though is that you can inherit the <code class="language-plaintext highlighter-rouge">TestAttribute</code> class
and override its <code class="language-plaintext highlighter-rouge">Execute</code> method. I created a required parameter to
specify the priority of the test and then used a <code class="language-plaintext highlighter-rouge">LoggedTestingContext</code>
class to store all the results.</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">namespace</span> <span class="nn">MyServices.Tests</span>
<span class="p">{</span>
   <span class="k">using</span> <span class="nn">Gallio.Framework.Pattern</span><span class="p">;</span>
   <span class="k">using</span> <span class="nn">MbUnit.Framework</span><span class="p">;</span>

   <span class="k">public</span> <span class="k">class</span> <span class="nc">LoggedTestAttribute</span>
      <span class="p">:</span> <span class="n">TestAttribute</span>
   <span class="p">{</span>
      <span class="k">public</span> <span class="k">const</span> <span class="kt">int</span> <span class="n">MinPriority</span> <span class="p">=</span> <span class="m">1</span><span class="p">;</span>
      <span class="k">public</span> <span class="k">const</span> <span class="kt">int</span> <span class="n">MaxPriority</span> <span class="p">=</span> <span class="m">3</span><span class="p">;</span>

      <span class="k">private</span> <span class="k">readonly</span> <span class="kt">int</span> <span class="n">priority</span><span class="p">;</span>
      <span class="k">public</span> <span class="kt">int</span> <span class="n">Priority</span> <span class="p">{</span> <span class="k">get</span> <span class="p">{</span> <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="n">priority</span><span class="p">;</span> <span class="p">}</span> <span class="p">}</span>

      <span class="k">public</span> <span class="nf">LoggedTestAttribute</span><span class="p">(</span><span class="kt">int</span> <span class="n">priority</span><span class="p">)</span>
      <span class="p">{</span>
         <span class="k">if</span> <span class="p">(</span><span class="n">priority</span> <span class="p">&lt;</span> <span class="n">MinPriority</span> <span class="p">||</span> <span class="n">priority</span> <span class="p">&gt;</span> <span class="n">MaxPriority</span><span class="p">)</span>
         <span class="p">{</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nf">ArgumentException</span><span class="p">(</span><span class="s">"Priority must be 1, 2, or 3."</span><span class="p">,</span> <span class="s">"priority"</span><span class="p">);</span>
         <span class="p">}</span>
         <span class="k">this</span><span class="p">.</span><span class="n">priority</span> <span class="p">=</span> <span class="n">priority</span><span class="p">;</span>
      <span class="p">}</span>

      <span class="k">protected</span> <span class="k">override</span> <span class="k">void</span> <span class="nf">Execute</span><span class="p">(</span><span class="n">PatternTestInstanceState</span> <span class="n">state</span><span class="p">)</span>
      <span class="p">{</span>
         <span class="k">try</span>
         <span class="p">{</span>
            <span class="k">base</span><span class="p">.</span><span class="nf">Execute</span><span class="p">(</span><span class="n">state</span><span class="p">);</span>
            <span class="n">LoggedTestingContext</span><span class="p">.</span><span class="nf">AddTest</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="n">state</span><span class="p">.</span><span class="n">Test</span><span class="p">,</span> <span class="k">true</span><span class="p">);</span>
         <span class="p">}</span>
         <span class="k">catch</span> <span class="p">(</span><span class="n">Exception</span><span class="p">)</span>
         <span class="p">{</span>            
            <span class="n">LoggedTestingContext</span><span class="p">.</span><span class="nf">AddTest</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="n">state</span><span class="p">.</span><span class="n">Test</span><span class="p">,</span> <span class="k">false</span><span class="p">);</span>
            <span class="k">throw</span><span class="p">;</span>
         <span class="p">}</span>
      <span class="p">}</span>
   <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">namespace</span> <span class="nn">MyServices.Tests</span>
<span class="p">{</span>
   <span class="k">using</span> <span class="nn">System</span><span class="p">;</span>
   <span class="k">using</span> <span class="nn">System.Collections.Generic</span><span class="p">;</span>
   <span class="k">using</span> <span class="nn">System.Linq</span><span class="p">;</span>
   <span class="k">using</span> <span class="nn">Gallio.Framework</span><span class="p">;</span>
   <span class="k">using</span> <span class="nn">Gallio.Model.Tree</span><span class="p">;</span>

   <span class="k">public</span> <span class="k">static</span> <span class="k">class</span> <span class="nc">LoggedTestingContext</span>
   <span class="p">{</span>
      <span class="k">private</span> <span class="k">class</span> <span class="nc">TestFailure</span>
      <span class="p">{</span>
         <span class="k">public</span> <span class="kt">string</span> <span class="n">FullName</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">private</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

         <span class="k">public</span> <span class="n">LoggedTestAttribute</span> <span class="n">TestAttribute</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">private</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

         <span class="k">public</span> <span class="nf">TestFailure</span><span class="p">(</span><span class="n">LoggedTestAttribute</span> <span class="n">testAttribute</span><span class="p">,</span> <span class="n">Test</span> <span class="n">test</span><span class="p">)</span>
         <span class="p">{</span>
            <span class="k">this</span><span class="p">.</span><span class="n">FullName</span> <span class="p">=</span> <span class="n">test</span><span class="p">.</span><span class="n">FullName</span><span class="p">;</span>
            <span class="k">this</span><span class="p">.</span><span class="n">TestAttribute</span> <span class="p">=</span> <span class="n">testAttribute</span><span class="p">;</span>
         <span class="p">}</span>
      <span class="p">}</span>

      <span class="k">private</span> <span class="k">const</span> <span class="kt">int</span> <span class="n">PriorityCount</span> <span class="p">=</span> <span class="n">LoggedTestAttribute</span><span class="p">.</span><span class="n">MaxPriority</span> <span class="p">-</span> <span class="n">LoggedTestAttribute</span><span class="p">.</span><span class="n">MinPriority</span> <span class="p">+</span> <span class="m">1</span><span class="p">;</span>
      
      <span class="k">private</span> <span class="k">static</span> <span class="k">readonly</span> <span class="n">Dictionary</span> <span class="n">nameToFailure</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">Dictionary</span><span class="p">();</span>

      <span class="k">internal</span> <span class="k">static</span> <span class="k">void</span> <span class="nf">AddTest</span><span class="p">(</span><span class="n">LoggedTestAttribute</span> <span class="n">testAttribute</span><span class="p">,</span> <span class="n">Test</span> <span class="n">test</span><span class="p">,</span> <span class="kt">bool</span> <span class="n">passed</span><span class="p">)</span>
      <span class="p">{</span>         
         <span class="k">if</span> <span class="p">(</span><span class="n">passed</span><span class="p">)</span>
         <span class="p">{</span>
            <span class="k">return</span><span class="p">;</span>
         <span class="p">}</span>
         <span class="kt">var</span> <span class="n">failure</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">TestFailure</span><span class="p">(</span><span class="n">testAttribute</span><span class="p">,</span> <span class="n">test</span><span class="p">);</span>
         <span class="k">if</span> <span class="p">(!</span><span class="n">nameToFailure</span><span class="p">.</span><span class="nf">ContainsKey</span><span class="p">(</span><span class="n">failure</span><span class="p">.</span><span class="n">FullName</span><span class="p">))</span>
         <span class="p">{</span>
            <span class="n">nameToFailure</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="n">failure</span><span class="p">.</span><span class="n">FullName</span><span class="p">,</span> <span class="n">failure</span><span class="p">);</span>
         <span class="p">}</span>
      <span class="p">}</span>

      <span class="k">private</span> <span class="k">static</span> <span class="kt">bool</span> <span class="nf">HasFailed</span><span class="p">(</span><span class="n">Test</span> <span class="n">fixtureTest</span><span class="p">,</span> <span class="kt">int</span> <span class="n">priority</span><span class="p">)</span>
      <span class="p">{</span>
         <span class="k">return</span> <span class="n">fixtureTest</span><span class="p">.</span><span class="n">Children</span>
            <span class="p">.</span><span class="nf">Any</span><span class="p">(</span><span class="n">c</span> <span class="p">=&gt;</span>
               <span class="n">nameToFailure</span><span class="p">.</span><span class="nf">ContainsKey</span><span class="p">(</span><span class="n">c</span><span class="p">.</span><span class="n">FullName</span><span class="p">)</span> <span class="p">&amp;&amp;</span>
               <span class="n">nameToFailure</span><span class="p">[</span><span class="n">c</span><span class="p">.</span><span class="n">FullName</span><span class="p">].</span><span class="n">TestAttribute</span><span class="p">.</span><span class="n">Priority</span> <span class="p">==</span> <span class="n">priority</span><span class="p">);</span>
      <span class="p">}</span>

      <span class="k">public</span> <span class="k">static</span> <span class="k">void</span> <span class="nf">LogSmokeTests</span><span class="p">(</span><span class="n">Test</span> <span class="n">fixtureTest</span><span class="p">,</span> <span class="kt">string</span> <span class="n">serviceName</span><span class="p">)</span>
      <span class="p">{</span>     
         <span class="k">foreach</span> <span class="p">(</span><span class="kt">var</span> <span class="n">priority</span> <span class="k">in</span> <span class="n">Enumerable</span><span class="p">.</span><span class="nf">Range</span><span class="p">(</span><span class="n">LoggedTestAttribute</span><span class="p">.</span><span class="n">MinPriority</span><span class="p">,</span> <span class="n">PriorityCount</span><span class="p">))</span>
         <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="nf">HasFailed</span><span class="p">(</span><span class="n">fixtureTest</span><span class="p">,</span> <span class="n">priority</span><span class="p">))</span>
            <span class="p">{</span>
               <span class="c1">// Send signal to monitoring system that test fixture has failed for priority # tests.</span>
            <span class="p">}</span>
            <span class="k">else</span>
            <span class="p">{</span>
               <span class="c1">// Send signal to monitoring system that test fixture has succeeded for priority # tests.</span>
            <span class="p">}</span>
         <span class="p">}</span>
      <span class="p">}</span>
   <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Finally, putting it together, I replaced the <code class="language-plaintext highlighter-rouge">TestAttribute</code> with the
new <code class="language-plaintext highlighter-rouge">LoggedTestAttribute</code> and then process the results in the test
fixture teardown.</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">namespace</span> <span class="nn">MyServices.Tests.Smoke</span>
<span class="p">{</span>
   <span class="k">using</span> <span class="nn">Gallio.Framework</span><span class="p">;</span>
   <span class="k">using</span> <span class="nn">Gallio.Model</span><span class="p">;</span>
   <span class="k">using</span> <span class="nn">MbUnit.Framework</span><span class="p">;</span>

   <span class="p">[</span><span class="n">TestFixture</span><span class="p">]</span>
   <span class="k">public</span> <span class="k">class</span> <span class="nc">OneOfMyServicesTests</span>
   <span class="p">{</span>
      <span class="p">[</span><span class="n">SetUp</span><span class="p">]</span>
      <span class="k">public</span> <span class="k">void</span> <span class="nf">Setup</span><span class="p">()</span>
      <span class="p">{</span>
         <span class="c1">// Setup an individual test to run.</span>
      <span class="p">}</span>

      <span class="p">[</span><span class="n">FixtureSetUp</span><span class="p">]</span>
      <span class="k">public</span> <span class="k">void</span> <span class="nf">TestFixtureSetUp</span><span class="p">()</span>
      <span class="p">{</span>
         <span class="c1">// Configure fixture for testing.</span>
      <span class="p">}</span>

      <span class="p">[</span><span class="n">FixtureTearDown</span><span class="p">]</span>
      <span class="k">public</span> <span class="k">void</span> <span class="nf">TestFixtureTearDown</span><span class="p">()</span>
      <span class="p">{</span>
         <span class="n">LoggedTestingContext</span><span class="p">.</span><span class="nf">LogSmokeTests</span><span class="p">(</span><span class="n">TestContext</span><span class="p">.</span><span class="n">CurrentContext</span><span class="p">.</span><span class="n">Test</span><span class="p">,</span> <span class="s">"OneOfMyServices"</span><span class="p">);</span>
      <span class="p">}</span>     

      <span class="p">[</span><span class="nf">LoggedTest</span><span class="p">(</span><span class="m">1</span><span class="p">)]</span>
      <span class="k">public</span> <span class="k">void</span> <span class="nf">MissionCritical</span><span class="p">()</span>
      <span class="p">{</span>
         <span class="c1">// ...</span>
      <span class="p">}</span>

      <span class="p">[</span><span class="nf">LoggedTest</span><span class="p">(</span><span class="m">2</span><span class="p">)]</span>
      <span class="k">public</span> <span class="k">void</span> <span class="nf">Important</span><span class="p">()</span>
      <span class="p">{</span>
         <span class="c1">// ...</span>
      <span class="p">}</span>

      <span class="p">[</span><span class="nf">LoggedTest</span><span class="p">(</span><span class="m">3</span><span class="p">)]</span>
      <span class="k">public</span> <span class="k">void</span> <span class="nf">AffectsFunctionalityByDoesntRequireImmediateAttention</span><span class="p">()</span>
      <span class="p">{</span>
         <span class="c1">// ...</span>
      <span class="p">}</span>     
   <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="more-reading--resources">More Reading &amp; Resources</h3>

<ul>
  <li><a href="https://code.google.com/p/mb-unit/downloads/list">mb-unit:
Downloads</a></li>
  <li><a href="http://www.cruisecontrolnet.org/">CruiseControl.NET</a></li>
</ul>
:ET