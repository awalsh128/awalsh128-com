I"´7<h3 id="motivation">Motivation</h3>

<p>I had these <a href="http://en.wikipedia.org/wiki/Flyweight_pattern">flyweights</a>
that added a lot of overhead to the
<a href="http://en.wikipedia.org/wiki/Serialization">serialization</a> process.
They weren't really needed in the serialized payload either. In fact, I
could recreate the flyweight in memory from just a single property on
the object.</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">public</span> <span class="k">class</span> <span class="nc">FlyweightObject</span>
<span class="p">{</span>
   <span class="k">public</span> <span class="kt">string</span> <span class="n">Key</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">private</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
   <span class="k">public</span> <span class="kt">string</span> <span class="n">AProperty</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">private</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
   <span class="k">public</span> <span class="kt">string</span> <span class="n">AnotherProperty</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">private</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
   <span class="k">public</span> <span class="kt">string</span> <span class="n">YetAnotherProperty</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">private</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
   <span class="c1">// ... Lots of properties.</span>

   <span class="c1">// Overridden GetHashCode and Equals methods to make equality by Key.</span>
<span class="p">}</span>
</code></pre></div></div>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">public</span> <span class="k">class</span> <span class="nc">FlyweightObjectFactory</span>
<span class="p">{</span>
   <span class="k">public</span> <span class="k">static</span> <span class="n">FlyweightObjectFactory</span> <span class="n">Instance</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">private</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

   <span class="c1">// Singleton initialization code.</span>

   <span class="k">public</span> <span class="n">FlyweightObject</span> <span class="nf">GetObject</span><span class="p">(</span><span class="kt">string</span> <span class="n">key</span><span class="p">)</span>
   <span class="p">{</span>
      <span class="c1">// Get from dictionary, or create object and add to dictionary.</span>
      <span class="c1">// Return object from dictionary.</span>
   <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Nothing out of the ordinary here. Although, these flyweights were also
used as keys in a dictionary I was serializing. This was a problem too
because <a href="http://www.newtonsoft.com/json/help/html/SerializationGuide.htm#Dictionarys">only scalars can be used when serializing dictionaries with
JSON.NET</a>.
It does mention that I can use a <a href="https://msdn.microsoft.com/en-us/library/system.componentmodel.typeconverter%28v=vs.110%29.aspx">type
converter</a>
though.</p>

<h3 id="serializing">Serializing</h3>

<p>Let focus on serializing this object to a
<a href="http://en.wikipedia.org/wiki/Primitive_data_type">scalar</a> first. The
<a href="http://www.newtonsoft.com/json/help/html/SerializationGuide.htm">JSON.NET serialization
guide</a>
mentions that I can override the
<a href="https://msdn.microsoft.com/en-us/library/system.object.tostring%28v=vs.110%29.aspx"><code class="language-plaintext highlighter-rouge">Object.ToString</code></a>
method. So let's do that.</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">public</span> <span class="k">class</span> <span class="nc">FlyweightObject</span>
<span class="p">{</span>
   <span class="k">public</span> <span class="kt">string</span> <span class="n">Key</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">private</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
   <span class="k">public</span> <span class="kt">string</span> <span class="n">AProperty</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">private</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
   <span class="k">public</span> <span class="kt">string</span> <span class="n">AnotherProperty</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">private</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
   <span class="k">public</span> <span class="kt">string</span> <span class="n">YetAnotherProperty</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">private</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
   <span class="c1">// ... Lots of properties.</span>

   <span class="c1">// Overridden GetHashCode and Equals methods to make equality by Key.</span>

   <span class="k">public</span> <span class="k">override</span> <span class="kt">string</span> <span class="nf">ToString</span><span class="p">()</span>
   <span class="p">{</span>
      <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="n">Key</span><span class="p">;</span>
   <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>I'm done right? Who needs type converters? Well this doesn't help us
when I need to deserialize. This is where type converters come into
play.</p>

<h3 id="implementing-a-type-converter">Implementing a Type Converter</h3>

<p>First we have to provide the concrete implementation of our type
converter class for the flyweight.</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">internal</span> <span class="k">class</span> <span class="nc">FlyweightObjectConverter</span>
   <span class="p">:</span> <span class="n">TypeConverter</span>
<span class="p">{</span>      
   <span class="c1">/// &lt;summary&gt;</span>
   <span class="c1">/// Returns whether this converter can convert an object of the given type to the type of this converter, using the specified context.</span>
   <span class="c1">/// &lt;/summary&gt;</span>
   <span class="c1">/// &lt;returns&gt;</span>
   <span class="c1">/// true if this converter can perform the conversion; otherwise, false.</span>
   <span class="c1">/// &lt;/returns&gt;</span>
   <span class="c1">/// &lt;param name="context"&gt;An  that provides a format context. &lt;/param&gt;</span>
   <span class="c1">/// &lt;param name="sourceType"&gt;A &lt;see cref="T:System.Type"/&gt; that represents the type you want to convert from. &lt;/param&gt;</span>
   <span class="k">public</span> <span class="k">override</span> <span class="kt">bool</span> <span class="nf">CanConvertFrom</span><span class="p">(</span><span class="n">ITypeDescriptorContext</span> <span class="n">context</span><span class="p">,</span> <span class="n">Type</span> <span class="n">sourceType</span><span class="p">)</span>
   <span class="p">{</span>
      <span class="k">return</span> <span class="n">sourceType</span> <span class="p">==</span> <span class="k">typeof</span><span class="p">(</span><span class="kt">string</span><span class="p">)</span> <span class="p">||</span> <span class="k">base</span><span class="p">.</span><span class="nf">CanConvertFrom</span><span class="p">(</span><span class="n">context</span><span class="p">,</span> <span class="n">sourceType</span><span class="p">);</span>
   <span class="p">}</span>

   <span class="c1">/// &lt;summary&gt;</span>
   <span class="c1">/// Converts the given object to the type of this converter, using the specified context and culture information.</span>
   <span class="c1">/// &lt;/summary&gt;</span>
   <span class="c1">/// &lt;returns&gt;</span>
   <span class="c1">/// An &lt;see cref="T:System.Object"/&gt; that represents the converted value.</span>
   <span class="c1">/// &lt;/returns&gt;</span>
   <span class="c1">/// &lt;param name="context"&gt;An &lt;see cref="T:System.ComponentModel.ITypeDescriptorContext"/&gt; that provides a format context. &lt;/param&gt;</span>
   <span class="c1">/// &lt;param name="culture"&gt;The &lt;see cref="T:System.Globalization.CultureInfo"/&gt; to use as the current culture. &lt;/param&gt;</span>
   <span class="c1">/// &lt;param name="value"&gt;The &lt;see cref="T:System.Object"/&gt; to convert. &lt;/param&gt;&lt;exception cref="T:System.NotSupportedException"&gt;The conversion cannot be performed. &lt;/exception&gt;</span>
   <span class="k">public</span> <span class="k">override</span> <span class="kt">object</span> <span class="nf">ConvertFrom</span><span class="p">(</span><span class="n">ITypeDescriptorContext</span> <span class="n">context</span><span class="p">,</span> <span class="n">CultureInfo</span> <span class="n">culture</span><span class="p">,</span> <span class="kt">object</span> <span class="k">value</span><span class="p">)</span>
   <span class="p">{</span>
      <span class="k">return</span> <span class="n">FlyweightObjectFactory</span><span class="p">.</span><span class="n">Instance</span><span class="p">.</span><span class="nf">GetObject</span><span class="p">((</span><span class="kt">string</span><span class="p">)</span><span class="k">value</span><span class="p">);</span>
   <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Then attribute the convertible class with the implementation.</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">[</span><span class="nf">TypeConverter</span><span class="p">(</span><span class="k">typeof</span><span class="p">(</span><span class="n">FlyweightObjectConverter</span><span class="p">))]</span>
<span class="k">public</span> <span class="k">class</span> <span class="nc">FlyweightObject</span>
<span class="p">{</span>
   <span class="k">public</span> <span class="kt">string</span> <span class="n">Key</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">private</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
   <span class="k">public</span> <span class="kt">string</span> <span class="n">AProperty</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">private</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
   <span class="k">public</span> <span class="kt">string</span> <span class="n">AnotherProperty</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">private</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
   <span class="k">public</span> <span class="kt">string</span> <span class="n">YetAnotherProperty</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">private</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
   <span class="c1">// ... Lots of properties.</span>

   <span class="c1">// Overridden GetHashCode and Equals methods to make equality by Key.</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Good to go. Now I can deserialize the flyweights. The JSON.NET secret
sauce can be found in <a href="https://github.com/JamesNK/Newtonsoft.Json/blob/master/Src/Newtonsoft.Json/Utilities/ConvertUtils.cs">the static method
<code class="language-plaintext highlighter-rouge">Newtonsoft.Json.Utilities.ConvertUtils.TryConvertInternal</code></a>.
This method is used by the internal reader class for its own
deserialization method and consequently for the final
Newtonsoft.Json.JsonSerializer class, which is the lynchpin for all the
serialization helper methods in the JSON.NET ecosystem.</p>

<h3 id="considerations">Considerations</h3>

<p>Instead of overriding the <code class="language-plaintext highlighter-rouge">Object.ToString</code> method, I could implement
the <code class="language-plaintext highlighter-rouge">TypeConverter.CanConvertTo</code> and <code class="language-plaintext highlighter-rouge">TypeConverter.ConvertTo</code> methods.
It is really up to you. In my case, I already had the <code class="language-plaintext highlighter-rouge">Object.ToString</code>
method overridden since the key property uniquely identifies the object
without having to create an implicitly structured string (ie. comma
delimited properties as a single string; "Prop1|Prop2|Prop3").</p>

<p>If you only need a type conversion for JSON, you can also use
JSON.NET's own <a href="http://www.newtonsoft.com/json/help/html/CustomJsonConverter.htm">custom type
converters</a>.
Although this doesn't work in the case of dictionary keys.</p>

<p>Lastly, if you have a <a href="http://en.wikipedia.org/wiki/Composite_data_type">complex
type</a> as your
dictionary key, you may want to consider just serializing it as a
collection and then deserializing it using a JSON.NET custom converter.</p>

<h3 id="more-reading--resources">More Reading &amp; Resources</h3>

<ul>
  <li><a href="https://msdn.microsoft.com/en-us/library/98bbex99%28v=vs.110%29.aspx">MSDN: Type Conversion in the .NET
Framework</a></li>
  <li><a href="https://msdn.microsoft.com/en-us/library/ayybcxe5.aspx">MSDN: How to: Implement a Type
Converter</a></li>
  <li><a href="https://json.codeplex.com/workitem/23872">JSON.NET: Add support for IReadOnlyList and
IReadOnlyDictionary</a> -
Provides <code class="language-plaintext highlighter-rouge">JsonConverter</code> implementations for read only collections.</li>
</ul>
:ET