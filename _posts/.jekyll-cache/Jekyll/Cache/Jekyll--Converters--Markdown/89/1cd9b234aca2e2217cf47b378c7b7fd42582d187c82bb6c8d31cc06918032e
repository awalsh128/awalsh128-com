I"á2<h3 id="motivation">Motivation</h3>

<p>I decided to use <a href="https://logging.apache.org/log4net/">log4net</a> for a
recent project I had been working on. There is a concept of
<a href="https://logging.apache.org/log4net/release/manual/configuration.html#loggers">loggers</a>
and
<a href="https://logging.apache.org/log4net/release/manual/configuration.html#appenders">appenders</a>.
Loggers are composed of appenders and a log threshold. Appenders are
consumers of logging information and provide specific implementations
(eg. file, email, event log, database). You can configure the loggers
and appenders either in the <a href="https://logging.apache.org/log4net/release/manual/configuration.html">application
configuration</a>
or <a href="http://www.roelvanlisdonk.nl/?p=723">at runtime</a>.</p>

<p>Configuring logging in the application configuration provides the most
flexibility. It is great being able to change settings on the fly,
especially when it is running in a production environment and
redeploying the build is out of the question. Although this approach
comes at the expense of having a lot of information in your application
configuration for the loggers and appenders. No big deal though if you
just have to configure once.</p>

<h3 id="why-templates">Why Templates?</h3>

<p>I had quite a bit of projects with a lot of redundant logging
configuration information in each one's application configuration file.
Much of the information had a standard form that we wanted uniform
across our different projects too (eg. log file name conventions, event
log setup, email format). Also, if we updated the logging appender
configuration for a new standard, we would need to do it to every
project's application configuration file. This is where templates came
into play.</p>

<h3 id="writing-the-code">Writing the Code</h3>

<p>To cut down the amount of configuration information needed to start a
new project with logging and make the configuration more uniform where
needed, we offloaded it into the code and left the rest in the
application configuration file like so.</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;log4net</span> <span class="na">xsi:noNamespaceSchemaLocation=</span><span class="s">"log4net.xsd"</span> <span class="na">xmlns:xsi=</span><span class="s">"http://www.w3.org/2001/XMLSchema-instance"</span><span class="nt">&gt;</span>

<span class="nt">&lt;logger</span> <span class="na">name=</span><span class="s">"LoggerTemplate"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;appender</span> <span class="na">name=</span><span class="s">"SmtpAppenderTemplate"</span> <span class="na">type=</span><span class="s">"log4net.Appender.SmtpAppender"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;to</span> <span class="na">value=</span><span class="s">"peter@initech.com"</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;from</span> <span class="na">value=</span><span class="s">"system@initech.com"</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;smtpHost</span> <span class="na">value=</span><span class="s">"mail.initech.com"</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;username</span> <span class="na">value=</span><span class="s">"peter"</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;password</span> <span class="na">value=</span><span class="s">"abc123"</span> <span class="nt">/&gt;</span>
  <span class="nt">&lt;/appender&gt;</span>
<span class="nt">&lt;/logger&gt;</span>

<span class="nt">&lt;root&gt;</span>
  <span class="nt">&lt;level</span> <span class="na">value=</span><span class="s">"INFO"</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;/root&gt;</span>

<span class="nt">&lt;/log4net&gt;</span>
</code></pre></div></div>

<p>We don't use the logger directly but rather as a template for our <a href="https://logging.apache.org/log4net/release/manual/configuration.html#root">root
logger</a>.
Now we just need to craft a method to consume the template and create
the root appenders at runtime.</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">/// &lt;summary&gt;</span>
<span class="c1">/// Get appenders matching the logger template name and use them to populate the root appenders at runtime.</span>
<span class="c1">/// &lt;/summary&gt;</span>
<span class="c1">/// &lt;param name="loggerTemplateName"&gt;The logger template name found in the application configuration.&lt;/param&gt;</span>
<span class="k">public</span> <span class="k">static</span> <span class="k">void</span> <span class="nf">ConfigureRootFromTemplate</span><span class="p">(</span><span class="kt">string</span> <span class="n">loggerTemplateName</span><span class="p">)</span>
<span class="p">{</span>
  <span class="n">ILog</span> <span class="n">logTemplate</span> <span class="p">=</span> <span class="n">LogManager</span><span class="p">.</span><span class="nf">GetLogger</span><span class="p">(</span><span class="n">loggerTemplateName</span><span class="p">);</span>

  <span class="k">if</span> <span class="p">(</span><span class="n">logTemplate</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
  <span class="p">{</span>
    <span class="k">throw</span> <span class="k">new</span> <span class="nf">ArgumentException</span><span class="p">(</span>
      <span class="n">String</span><span class="p">.</span><span class="nf">Format</span><span class="p">(</span>
        <span class="s">"Logger template {0} not found in log4net configuration. Make sure there is an "</span> <span class="p">+</span>
        <span class="s">"logger in the log4net configuration with the name {0}."</span><span class="p">,</span>
        <span class="n">loggerTemplateName</span><span class="p">),</span>
        <span class="s">"loggerTemplateName"</span><span class="p">);</span>
  <span class="p">}</span>

  <span class="n">IAppender</span><span class="p">[]</span> <span class="n">appenderTemplates</span> <span class="p">=</span> <span class="n">logTemplate</span><span class="p">.</span><span class="n">Logger</span><span class="p">.</span><span class="n">Repository</span><span class="p">.</span><span class="nf">GetAppenders</span><span class="p">();</span>
  <span class="kt">var</span> <span class="n">smtpAppenderTemplate</span> <span class="p">=</span> <span class="n">appenderTemplates</span><span class="p">.</span><span class="nf">FirstOrDefault</span><span class="p">(</span><span class="n">a</span> <span class="p">=&gt;</span> <span class="n">a</span> <span class="k">is</span> <span class="n">SmtpAppender</span><span class="p">)</span> <span class="k">as</span> <span class="n">SmtpAppender</span><span class="p">;</span>

  <span class="k">if</span> <span class="p">(</span><span class="n">smtpAppenderTemplate</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
  <span class="p">{</span>
    <span class="k">throw</span> <span class="k">new</span> <span class="nf">ArgumentException</span><span class="p">(</span>
      <span class="n">String</span><span class="p">.</span><span class="nf">Format</span><span class="p">(</span>
        <span class="s">"SmtpAppender template not found in log4net configuration. Make sure there is an "</span> <span class="p">+</span>
        <span class="s">"SmtpAppender in the log4net {0} logger."</span><span class="p">,</span>
        <span class="n">loggerTemplateName</span><span class="p">),</span>
        <span class="s">"loggerTemplateName"</span><span class="p">);</span>
  <span class="p">}</span>

  <span class="c1">// Can repeat the above pattern with other appenders as well.</span>
  <span class="c1">// Create appenders using the template information from above.</span>
  
  <span class="nf">AddAppendersToRootAndConfigure</span><span class="p">(</span>
    <span class="k">new</span> <span class="n">AppenderCollection</span> 
 <span class="p">{</span>
      <span class="c1">// Put your created appenders here.</span>
    <span class="p">});</span>
<span class="p">}</span>

<span class="k">private</span> <span class="k">static</span> <span class="k">void</span> <span class="nf">AddAppendersToRootAndConfigure</span><span class="p">(</span><span class="n">AppenderCollection</span> <span class="n">appenders</span><span class="p">)</span>
<span class="p">{</span>
  <span class="c1">// Get the log repository.</span>
  <span class="kt">var</span> <span class="n">hierarchy</span> <span class="p">=</span> <span class="p">(</span><span class="n">Hierarchy</span><span class="p">)</span><span class="n">log4net</span><span class="p">.</span><span class="n">LogManager</span><span class="p">.</span><span class="nf">GetRepository</span><span class="p">();</span>
  <span class="c1">// Get the root logger.</span>
  <span class="n">Logger</span> <span class="n">rootLogger</span> <span class="p">=</span> <span class="n">hierarchy</span><span class="p">.</span><span class="n">Root</span><span class="p">;</span>
  <span class="k">foreach</span> <span class="p">(</span><span class="kt">var</span> <span class="n">appender</span> <span class="k">in</span> <span class="n">appenders</span><span class="p">)</span>
  <span class="p">{</span>
    <span class="c1">// Add all the appenders and activate.</span>
    <span class="n">rootLogger</span><span class="p">.</span><span class="nf">AddAppender</span><span class="p">(</span><span class="n">appender</span><span class="p">);</span>
    <span class="p">((</span><span class="n">AppenderSkeleton</span><span class="p">)</span><span class="n">appender</span><span class="p">).</span><span class="nf">ActivateOptions</span><span class="p">();</span>
  <span class="p">}</span>
  <span class="c1">// Flag root logger as configured with new appender information.</span>
  <span class="n">rootLogger</span><span class="p">.</span><span class="n">Hierarchy</span><span class="p">.</span><span class="n">Configured</span> <span class="p">=</span> <span class="k">true</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Then just call the configuration method at the application's startup.</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Program</span>
<span class="p">{</span>
  <span class="c1">/// </span>
  <span class="c1">/// The main entry point for the application.</span>
  <span class="c1">/// </span>
  <span class="k">static</span> <span class="k">void</span> <span class="nf">Main</span><span class="p">()</span>
  <span class="p">{</span>
    <span class="c1">// Other startup configuration code.</span>

    <span class="n">log4net</span><span class="p">.</span><span class="n">Config</span><span class="p">.</span><span class="n">XmlConfigurator</span><span class="p">.</span><span class="nf">Configure</span><span class="p">();</span> <span class="c1">// Load the application configuration information.</span>
    <span class="n">Log</span><span class="p">.</span><span class="nf">ConfigureRootFromTemplate</span><span class="p">(</span><span class="s">"LoggerTemplate"</span><span class="p">);</span>

    <span class="c1">// More startup configuration code.</span>
  <span class="p">}</span>
</code></pre></div></div>

<h3 id="considerations">Considerations</h3>

<p>I don't recommend using this approach in all cases. It definitely cuts
down the amount of application configuration needed but at the cost of
information hiding, since it has been moved to code. Also, it may not be
obvious to an uninitiated developer what your application configuration
is doing, especially since this template approach is not encoded into
the structure of log4net's XML. Although, if you have many projects and
need to effect changes to logging across them, this may be a good
solution for you.</p>

<h3 id="more-reading--resources">More Reading &amp; Resources</h3>

<ul>
  <li><a href="http://c2.com/cgi/wiki?LoggingBestPractices">C&amp;C Inc: Logging Best
Practices</a></li>
  <li><a href="http://www.beefycode.com/post/Log4Net-Recommended-Practices-pt-1-Your-Code.aspx">beefycode: Log4Net Recommended Practices pt 1: Your
Code</a></li>
  <li><a href="http://www.jayway.com/2011/06/13/a-nice-basic-log4net-setup/">JayWay: A nice, basic log4net
setup</a></li>
  <li><a href="http://stackoverflow.com/questions/3143929/why-do-loggers-recommend-using-a-logger-per-class">Stack Overflow: Why do loggers recommend using a logger per
class?</a></li>
  <li><a href="http://stackoverflow.com/questions/5504148/log4net-configure-to-ignore-messages-from-a-specific-class">Stack Overflow: log4net: Configure to ignore messages from a
specific
class</a></li>
  <li><a href="http://stackoverflow.com/questions/571876/best-way-to-dynamically-set-an-appender-file-path">Stack Overflow: Best way to dynamically set an appender file
path</a></li>
</ul>
:ET