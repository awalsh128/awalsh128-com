I"õ<h3 id="introduction">Introduction</h3>

<p>Microsoft <a href="http://msdn.microsoft.com/en-us/library/windows/desktop/aa366450(v=vs.85).aspx">introduced native image
mastering</a>
support in Vista, going forward. The library itself is not too complex
but the latest version of the <a href="http://en.wikipedia.org/wiki/Image_Mastering_API">image mastering API
(IMAPI)</a> has some
quirks. This is well documented by <a href="http://www.codeproject.com/script/Membership/View.aspx?mid=208197">Eric
Haddan</a>
in his
<a href="http://www.codeproject.com/Articles/24544/Burning-and-Erasing-CD-DVD-Blu-ray-Media-with-C-an">article</a>
describing how to build an interop file and use it from .NET.</p>

<h3 id="implementation">Implementation</h3>

<p>I wanted to take it a step further and provide a library wrapper that
was CLI compliant. The end result is a class that provides 3 methods,
called in order, to burn an image. The project can be found on <a href="https://github.com/awalsh128/IMAPI2">my
GitHub account</a>.</p>

<h2 id="properties">Properties</h2>

<ul>
  <li><strong>Media</strong>: A read only property that populates after the LoadMedia
call and reports what type of physical media is connected (eg. CD-R,
DVD-R, DVD+RW, etc.).</li>
  <li><strong>MediaStates</strong>: A read only collection of states in which the media
is under, that populates after the LoadMedia call (eg. is blank,
overwriteable, unsupported).</li>
  <li><strong>MediaCapacity</strong>: A read only property that populates after the
LoadMedia call and reports the size capacity of the media.</li>
  <li><strong>Nodes</strong>: A root list of file and directory nodes that are to be
written to the media.</li>
  <li><strong>Recorders</strong>: A read only selectable collection. A recorder must be
selected for the LoadRecorder call.</li>
  <li><strong>VolumeLabel</strong>: A property that sets the volume label of the media
to be written to.</li>
</ul>

<h2 id="methods">Methods</h2>

<ul>
  <li><strong>LoadRecorder</strong>: Verifies a recorder is selected, loads the
recording drive resources and verifies that it is working.</li>
  <li><strong>LoadMedia</strong>: Loads the media resource and verifies that it is
valid for the recorder. An exception will occur if the media isn't
supported (eg. closed session disc, no disc present).</li>
  <li><strong>FormatMedia</strong>: Formats the media of any previous data.</li>
  <li><strong>WriteImage</strong>: The final step to write your files to disc. This is
a blocking call.</li>
</ul>

<h2 id="events">Events</h2>

<ul>
  <li><strong>FormatEraseUpdate</strong>: Reports progress of FormatMedia call.</li>
  <li><strong>FormatWriteUpdate</strong>: Reports progress of files being written to
the media.</li>
  <li><strong>ImageUpdate</strong>: Reports progress of files being added to the media
image.</li>
</ul>

<h3 id="caveats">Caveats</h3>

<p>I use this library for the simple single purpose of writing finalized
images to a blank CD. It has not been fully tested to accomodate all
media and recorder state scenarios; I haven't tried it yet with DVD's
or multi-session discs. If you would like to extend the library, feel
free to push some changes to <a href="https://github.com/awalsh128/IMAPI2">the GitHub
project</a> and I will wrap them in.</p>

<p>I decided to leave the method calls as blocking (synchronous) since
there could be many different synchronization models that may use this
library. For my purposes, I used this in an WPF application that would
call the WriteImage method from a
<a href="http://msdn.microsoft.com/en-us/library/system.threading.tasks.task.aspx">Task</a>
and then post back the progress events of the write using the
<a href="http://msdn.microsoft.com/en-us/library/system.windows.threading.dispatcher.aspx">Dispatcher</a>
from my WPF window. Below is a code snippet demonstrating this.</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">private</span> <span class="n">ImageMaster</span> <span class="n">_burner</span><span class="p">;</span>

<span class="p">...</span>

<span class="k">private</span> <span class="k">void</span> <span class="nf">_CreateCd</span><span class="p">()</span>
<span class="p">{</span>
 <span class="c1">// files added to _burner and _burner.WriteImage called</span>
<span class="p">}</span>

<span class="k">private</span> <span class="k">void</span> <span class="nf">_burner_FormatWriteUpdate</span><span class="p">(</span><span class="n">IMAPI2</span><span class="p">.</span><span class="n">ImageMaster</span> <span class="n">sender</span><span class="p">,</span> <span class="n">IMAPI2</span><span class="p">.</span><span class="n">FormatWriteUpdateEventArgs</span> <span class="n">e</span><span class="p">)</span>
<span class="p">{</span>
 <span class="k">this</span><span class="p">.</span><span class="n">Dispatcher</span><span class="p">.</span><span class="nf">Invoke</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="k">this</span><span class="p">.</span><span class="n">statusProgressBar</span><span class="p">.</span><span class="n">Value</span> <span class="p">==</span> <span class="p">(</span><span class="n">e</span><span class="p">.</span><span class="n">ElapsedTime</span> <span class="p">/</span> <span class="n">e</span><span class="p">.</span><span class="n">TotalTime</span><span class="p">)</span> <span class="p">*</span> <span class="m">100</span><span class="p">);</span>
<span class="p">}</span>

<span class="k">private</span> <span class="k">void</span> <span class="nf">CreateCdWindow_Loaded</span><span class="p">(</span><span class="kt">object</span> <span class="n">sender</span><span class="p">,</span> <span class="n">System</span><span class="p">.</span><span class="n">Windows</span><span class="p">.</span><span class="n">RoutedEventArgs</span> <span class="n">e</span><span class="p">)</span>
<span class="p">{</span>
 <span class="n">System</span><span class="p">.</span><span class="n">Threading</span><span class="p">.</span><span class="n">Tasks</span><span class="p">.</span><span class="n">Task</span><span class="p">.</span><span class="n">Factory</span><span class="p">.</span><span class="nf">StartNew</span><span class="p">(</span><span class="n">_CreateCd</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>
:ET