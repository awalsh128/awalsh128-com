I"ÖV<p>While Java may be a higher level language that makes code writeability
easier, conventions must be broken when developing on Android to reap
performance gains. This is especially true for games where logic and
rendering must be done on a tight loop.</p>

<p>The Android developer page provides <a href="http://developer.android.com/guide/practices/design/performance.html">helpful
tips</a>
for optimizing your Java code. Below are the optimizations that I have
found to improve performance.</p>

<ol>
  <li>
    <p><strong>Front load memory allocation at startup instead of dynamically.</strong></p>

    <p>We saw the largest performance gain here. The
<a href="http://en.wikipedia.org/wiki/Garbage_collection_(computer_science)">GC</a>
can kill performance in a CPU intensive application or game. If you
pool your instances in an array instead of dynamically allocating
it, you can save the GC calls from happening. This will result in a
slightly larger memory footprint if you tweak it right.</p>

    <p>Below is code that provides a fixed-size generic list
implementation; the internal array never grows/shrinks. The
<em>executePendingRemoves</em> routine is needed since object removal must
sometimes be put into a <a href="http://en.wikipedia.org/wiki/Critical_section">critical
region</a> with a
<a href="http://docs.oracle.com/javase/tutorial/essential/concurrency/locksync.html"><em>synchronized</em>
block</a>.
You may want to queue up removals but still make them available to
other threads up until the moment they are removed in bulk.</p>

    <div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">public</span> <span class="k">class</span> <span class="nc">List</span><span class="p">&amp;</span><span class="n">ltT</span><span class="p">&gt;</span> <span class="p">{</span>

 <span class="k">private</span> <span class="kt">int</span> <span class="n">mCount</span><span class="p">;</span>
 <span class="k">private</span> <span class="n">T</span> <span class="n">mItems</span><span class="p">[];</span>
 <span class="k">private</span> <span class="kt">int</span> <span class="n">mRemoveCount</span><span class="p">;</span>
 <span class="k">private</span> <span class="kt">int</span><span class="p">[]</span> <span class="n">mRemoveIndices</span><span class="p">;</span> 
     
 <span class="nf">@SuppressWarnings</span><span class="p">(</span><span class="s">"unchecked"</span><span class="p">)</span>
 <span class="k">public</span> <span class="nf">List</span><span class="p">(</span><span class="kt">int</span> <span class="n">capacity</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">mItems</span> <span class="p">=</span> <span class="p">(</span><span class="n">T</span><span class="p">[])</span> <span class="k">new</span> <span class="n">Object</span><span class="p">[</span><span class="n">capacity</span><span class="p">];</span>
  <span class="n">mRemoveIndices</span> <span class="p">=</span> <span class="k">new</span> <span class="kt">int</span><span class="p">[</span><span class="n">capacity</span><span class="p">];</span>
  <span class="n">mCount</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span>
 <span class="p">}</span>
     
 <span class="k">public</span> <span class="k">void</span> <span class="k">add</span><span class="p">(</span><span class="n">T</span> <span class="n">item</span><span class="p">){</span>
  <span class="n">mItems</span><span class="p">[</span><span class="n">mCount</span><span class="p">]</span> <span class="p">=</span> <span class="n">item</span><span class="p">;</span>
  <span class="n">mCount</span><span class="p">++;</span>
 <span class="p">}</span>
     
 <span class="k">public</span> <span class="k">void</span> <span class="nf">clear</span><span class="p">(){</span>
  <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">index</span><span class="p">=</span><span class="m">0</span><span class="p">;</span> <span class="n">index</span> <span class="p">&lt;</span> <span class="n">mCount</span><span class="p">;</span> <span class="n">index</span><span class="p">++)</span>
  <span class="p">{</span>
   <span class="n">mItems</span><span class="p">[</span><span class="n">index</span><span class="p">]</span> <span class="p">=</span> <span class="k">null</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="n">mCount</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span>
 <span class="p">}</span>
     
 <span class="k">public</span> <span class="k">void</span> <span class="nf">executePendingRemoves</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="p">=</span><span class="m">0</span><span class="p">;</span><span class="n">i</span> <span class="p">&lt;</span> <span class="n">mRemoveCount</span><span class="p">;</span> <span class="n">i</span><span class="p">++)</span> <span class="p">{</span>
   <span class="n">mItems</span><span class="p">[</span><span class="n">mRemoveIndices</span><span class="p">[</span><span class="n">i</span><span class="p">]]</span> <span class="p">=</span> <span class="k">null</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="kt">int</span> <span class="n">newCount</span><span class="p">=</span><span class="m">0</span><span class="p">;</span>
  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="p">=</span><span class="m">0</span><span class="p">;</span><span class="n">i</span> <span class="p">&lt;</span> <span class="n">mCount</span><span class="p">;</span> <span class="n">i</span><span class="p">++)</span> <span class="p">{</span>
   <span class="k">if</span> <span class="p">(</span><span class="n">mItems</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="p">!=</span> <span class="k">null</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">mItems</span><span class="p">[</span><span class="n">newCount</span><span class="p">]</span> <span class="p">=</span> <span class="n">mItems</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
    <span class="n">newCount</span><span class="p">++;</span>
   <span class="p">}</span>
  <span class="p">}</span>
  <span class="n">mCount</span> <span class="p">=</span> <span class="n">newCount</span><span class="p">;</span>
  <span class="n">mRemoveCount</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span>
 <span class="p">}</span>
     
 <span class="k">public</span> <span class="n">T</span> <span class="k">get</span><span class="p">(</span><span class="kt">int</span> <span class="n">index</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="n">mItems</span><span class="p">[</span><span class="n">index</span><span class="p">];}</span>
 <span class="k">public</span> <span class="kt">int</span> <span class="nf">getCount</span><span class="p">()</span> <span class="p">{</span> <span class="k">return</span> <span class="n">mCount</span><span class="p">;}</span>
 <span class="k">public</span> <span class="kt">int</span> <span class="nf">getIndex</span><span class="p">(</span><span class="n">T</span> <span class="n">item</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="p">=</span><span class="m">0</span><span class="p">;</span> <span class="n">i</span> <span class="p">&lt;</span> <span class="n">mCount</span><span class="p">;</span> <span class="n">i</span><span class="p">++)</span> <span class="p">{</span>
   <span class="k">if</span> <span class="p">(</span><span class="n">mItems</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="p">==</span> <span class="n">item</span><span class="p">)</span> <span class="k">return</span> <span class="n">i</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="p">-</span><span class="m">1</span><span class="p">;</span>
 <span class="p">}</span>
 <span class="k">public</span> <span class="kt">int</span> <span class="nf">getPendingRemoveCount</span><span class="p">()</span> <span class="p">{</span> <span class="k">return</span> <span class="n">mRemoveCount</span><span class="p">;</span> <span class="p">}</span>
 <span class="k">public</span> <span class="kt">int</span><span class="p">[]</span> <span class="nf">getPendingRemoves</span><span class="p">()</span> <span class="p">{</span> <span class="k">return</span> <span class="n">mRemoveIndices</span><span class="p">;</span> <span class="p">}</span>
 <span class="k">public</span> <span class="n">Object</span><span class="p">[]</span> <span class="nf">getItems</span><span class="p">()</span> <span class="p">{</span> <span class="k">return</span> <span class="n">mItems</span><span class="p">;}</span>
     
 <span class="k">public</span> <span class="k">void</span> <span class="nf">pendingRemoveAt</span><span class="p">(</span><span class="kt">int</span> <span class="n">index</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="p">=</span><span class="m">0</span><span class="p">;</span> <span class="n">i</span><span class="p">&lt;</span> <span class="n">mRemoveCount</span><span class="p">;</span> <span class="n">i</span><span class="p">++)</span> <span class="p">{</span>
   <span class="k">if</span> <span class="p">(</span><span class="n">index</span> <span class="p">==</span> <span class="n">mRemoveIndices</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
    <span class="k">return</span><span class="p">;</span>
   <span class="k">else</span> <span class="k">if</span>  <span class="p">(</span><span class="n">index</span> <span class="p">&lt;</span> <span class="n">mRemoveIndices</span><span class="p">[</span><span class="n">i</span><span class="p">])</span> <span class="p">{</span>
    <span class="kt">int</span> <span class="n">swapIndex</span> <span class="p">=</span> <span class="n">mRemoveIndices</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
    <span class="n">mRemoveIndices</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="p">=</span> <span class="n">index</span><span class="p">;</span>
    <span class="n">index</span> <span class="p">=</span> <span class="n">swapIndex</span><span class="p">;</span>
   <span class="p">}</span>
  <span class="p">}</span>
  <span class="n">mRemoveIndices</span><span class="p">[</span><span class="n">mRemoveCount</span><span class="p">]</span> <span class="p">=</span> <span class="n">index</span><span class="p">;</span>
  <span class="n">mRemoveCount</span><span class="p">++;</span>
 <span class="p">}</span>
     
 <span class="k">public</span> <span class="k">void</span> <span class="nf">removeAt</span><span class="p">(</span><span class="kt">int</span> <span class="n">index</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">index</span> <span class="p">&lt;</span> <span class="n">mCount</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="p">=</span> <span class="n">index</span><span class="p">;</span> <span class="n">i</span> <span class="p">&lt;</span> <span class="n">mCount</span><span class="p">;</span> <span class="n">i</span><span class="p">++)</span> <span class="p">{</span>
                <span class="k">if</span> <span class="p">(</span><span class="n">i</span> <span class="p">+</span> <span class="m">1</span> <span class="p">&lt;</span> <span class="n">mItems</span><span class="p">.</span><span class="n">length</span> <span class="p">&amp;&amp;</span> <span class="n">i</span> <span class="p">+</span> <span class="m">1</span> <span class="p">&lt;</span> <span class="n">mCount</span><span class="p">)</span> <span class="p">{</span>
                 <span class="n">mItems</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="p">=</span> <span class="n">mItems</span><span class="p">[</span><span class="n">i</span> <span class="p">+</span> <span class="m">1</span><span class="p">];</span>
                <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
                 <span class="n">mItems</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>  <span class="p">=</span> <span class="k">null</span><span class="p">;</span>
                <span class="p">}</span>
            <span class="p">}</span>
            <span class="n">mCount</span><span class="p">--;</span>
        <span class="p">}</span>
 <span class="p">}</span>
     
 <span class="k">public</span> <span class="n">T</span> <span class="nf">removeLast</span><span class="p">()</span> <span class="p">{</span>
  <span class="n">mCount</span><span class="p">--;</span>
      
  <span class="n">final</span> <span class="n">T</span> <span class="n">item</span> <span class="p">=</span> <span class="n">mItems</span><span class="p">[</span><span class="n">mCount</span><span class="p">];</span>
  <span class="n">mItems</span><span class="p">[</span><span class="n">mCount</span><span class="p">]</span> <span class="p">=</span> <span class="k">null</span><span class="p">;</span>
  <span class="k">return</span> <span class="n">item</span><span class="p">;</span>
 <span class="p">}</span>
     
<span class="p">}</span>
</code></pre></div>    </div>

    <p>Lastly is the pooling object that can be inherited by any
application level instance (eg. <em>FlyingWizardsPool extends
ObjectPool</em>). When you want to instantiate a flying wizard object,
just type in <em>FlyingWizard wizard = wizardPool.checkOut();</em>.</p>

    <div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">public</span> <span class="k">abstract</span> <span class="k">class</span> <span class="nc">ObjectPool</span><span class="p">&amp;</span><span class="n">ltT</span><span class="p">&gt;</span> <span class="p">{</span>

 <span class="k">private</span> <span class="kt">int</span> <span class="n">mCapacity</span><span class="p">;</span>
 <span class="k">private</span> <span class="n">List</span><span class="p">&amp;</span><span class="n">ltT</span><span class="p">&gt;</span> <span class="n">mPool</span><span class="p">;</span>
     
 <span class="nf">@SuppressWarnings</span><span class="p">({</span> <span class="s">"unchecked"</span><span class="p">,</span> <span class="s">"rawtypes"</span> <span class="p">})</span>
 <span class="k">public</span> <span class="nf">ObjectPool</span><span class="p">(</span><span class="kt">int</span> <span class="n">capacity</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">mPool</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">List</span><span class="p">(</span><span class="n">capacity</span><span class="p">);</span>
  <span class="n">mCapacity</span> <span class="p">=</span> <span class="n">capacity</span><span class="p">;</span>
  <span class="k">this</span><span class="p">.</span><span class="nf">fill</span><span class="p">();</span>
 <span class="p">}</span>
     
 <span class="k">public</span> <span class="k">void</span> <span class="nf">checkIn</span><span class="p">(</span><span class="n">T</span> <span class="n">poolItem</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">mPool</span><span class="p">.</span><span class="k">add</span><span class="p">(</span><span class="n">poolItem</span><span class="p">);</span>
 <span class="p">}</span>
     
 <span class="k">public</span> <span class="n">T</span> <span class="nf">checkOut</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">return</span> <span class="n">mPool</span><span class="p">.</span><span class="nf">removeLast</span><span class="p">();</span>
 <span class="p">}</span>
     
 <span class="k">public</span> <span class="k">abstract</span> <span class="k">void</span> <span class="nf">fill</span><span class="p">();</span>
     
 <span class="k">public</span> <span class="kt">int</span> <span class="nf">getCount</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">return</span> <span class="n">mPool</span><span class="p">.</span><span class="nf">getCount</span><span class="p">();</span>
 <span class="p">}</span>
     
 <span class="k">public</span> <span class="kt">int</span> <span class="nf">getCapacity</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">return</span> <span class="n">mCapacity</span><span class="p">;</span>
 <span class="p">}</span>

<span class="p">}</span>
</code></pre></div>    </div>

    <p>Below is an example implementation of the <em>ObjectPool</em> abstract
class. Note how the <em>fill</em> routine is implemented. Also, front
loading memory like this means that you will need an <em>initialize</em> on
your instances so that the class fields can be put back to a "just
instantiated" state. Normally we would use a constructor but to
keep the allocation static, an <em>initialize</em> call is necessary.</p>

    <div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">public</span> <span class="k">static</span> <span class="k">class</span> <span class="nc">FlyingWizardPool</span> <span class="n">extends</span> <span class="n">ObjectPool</span> <span class="p">{</span>
 <span class="k">public</span> <span class="nf">FlyingWizardPool</span><span class="p">(</span><span class="kt">int</span> <span class="n">capacity</span><span class="p">)</span> <span class="p">{</span>
  <span class="nf">super</span><span class="p">(</span><span class="n">capacity</span><span class="p">);</span>
 <span class="p">}</span>

 <span class="k">public</span> <span class="n">FlyingWizard</span> <span class="nf">checkOut</span><span class="p">(</span><span class="kt">float</span> <span class="n">x</span><span class="p">,</span> <span class="kt">float</span> <span class="n">y</span><span class="p">,</span> <span class="kt">float</span> <span class="n">destinationX</span><span class="p">,</span> <span class="kt">float</span> <span class="n">destinationY</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">FlyingWizard</span> <span class="n">wizard</span> <span class="p">=</span> <span class="k">this</span><span class="p">.</span><span class="nf">checkOut</span><span class="p">();</span>
  <span class="n">wizard</span><span class="p">.</span><span class="nf">initialize</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">);</span>
  <span class="k">return</span> <span class="n">wizard</span><span class="p">;</span>
 <span class="p">}</span>
      
 <span class="n">@Override</span>
 <span class="k">public</span> <span class="k">void</span> <span class="nf">fill</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="p">=</span><span class="m">0</span><span class="p">;</span> <span class="n">i</span> <span class="p">&lt;</span> <span class="k">this</span><span class="p">.</span><span class="nf">getCapacity</span><span class="p">();</span> <span class="n">i</span><span class="p">++)</span> <span class="p">{</span>
   <span class="k">this</span><span class="p">.</span><span class="nf">checkIn</span><span class="p">(</span><span class="k">new</span> <span class="nf">FlyingWizard</span><span class="p">());</span>
  <span class="p">}</span>
 <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p><strong>Choose larger block routines instead of calling out to helper
subroutines.</strong></p>

    <p>Since the Dalvik is a register based architecture, every time a
routine is called from another, the register values must be stored
to memory before the call and loaded back in after the routine has
returned. Avoiding helper routine inside commonly called routines
will reduce this load/store overhead.</p>
  </li>
  <li>
    <p><strong>Remove <a href="http://en.wikipedia.org/wiki/Mutator_method">accessors</a>
and allow direct access to class fields.</strong></p>

    <p>Accessors are usually good form and observe the
<a href="http://en.wikipedia.org/wiki/Abstract_data_type">ADT</a>. Although, to
avoid the overhead involved in a routine call and additional
allocation of memory for the copied out value, it is best to allow
direct access to the class field. This makes it more difficult to
protect the <a href="http://en.wikipedia.org/wiki/Precondition">conditions</a>
for the field but is a worthy sacrifice if it is called often.</p>
  </li>
  <li>
    <p><strong>Make routines static if they don't access class fields.</strong></p>

    <p>The Android team recommends using this for an approximate 15-20%
performance gain. This means less work for the Dalvik during
run-time optimization and the routine can be inlined for faster
execution.</p>
  </li>
  <li>
    <p><strong>Use constants instead of enums.</strong></p>

    <p>This is more of a negligible optimization; it was delisted from
Android's performance page. Instead of having an enum, you can keep
the enumeration as an integer constant.</p>
  </li>
</ol>

<p>It is important to follow the ADT for good code writeability/readability
and bug minimization. Use these optimizations only on code that really
needs it. This means it should apply to routines and fields that are
called frequently by your application.</p>
:ET